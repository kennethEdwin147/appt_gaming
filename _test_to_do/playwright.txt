# 🎭 Instructions Playwright + Laravel - Auth Workflows Focus

## 🎯 Objectif
Configurer Playwright pour tester UNIQUEMENT les workflows d'authentification essentiels de l'application Laravel de coaching/créateurs.

## 📋 Focus Auth Workflows
1. **Login flows** - Customer, Creator, Admin
2. **Registration flows** - Choix rôle, validation, redirection  
3. **Email verification** - Flow complet
4. **Creator setup wizard** - Profil, validation, completion
5. **Role-based redirections** - Selon état du compte

## 🛠️ Installation & Configuration

### Installation simple
```bash
npm create playwright@latest
# Choisir TypeScript ✅
# Choisir tests dans tests/ folder ✅
# Ajouter GitHub Actions workflow? → No (pour l'instant)
```

### Configuration Laravel
```javascript
// playwright.config.ts
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests/playwright',
  fullyParallel: false, // Important pour Laravel DB
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: 1, // Un seul worker pour éviter conflits DB
  reporter: 'html',
  
  use: {
    baseURL: 'http://localhost:8000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
  },

  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    }
  ],

  webServer: {
    command: 'php artisan serve --port=8000 --env=testing',
    port: 8000,
    reuseExistingServer: !process.env.CI,
  },
});
```

## 📁 Structure des tests

```
tests/playwright/
├── auth/
│   ├── login-flow.spec.ts           # Login tous rôles
│   ├── registration-flow.spec.ts     # Registration customer/creator
│   ├── creator-setup.spec.ts        # Setup wizard créateur
│   └── email-verification.spec.ts   # Verification email
├── fixtures/
│   └── auth-data.ts                 # Données de test
└── utils/
    ├── database-helpers.ts          # Reset DB, create users
    └── auth-helpers.ts              # Login, registration helpers
```

## 🔧 Helpers Laravel-Playwright

### database-helpers.ts
```typescript
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

export async function resetDatabase() {
  await execAsync('php artisan migrate:fresh --seed --env=testing');
}

export async function createUser(userData: any = {}) {
  const defaultUser = {
    first_name: 'Test',
    last_name: 'User',
    email: 'test@example.com',
    password: 'password',
    role: 'customer',
    email_verified_at: 'now()',
    ...userData
  };
  
  const command = `php artisan tinker --execute="
    echo json_encode(\\App\\Models\\User::factory()->create([
      'first_name' => '${defaultUser.first_name}',
      'last_name' => '${defaultUser.last_name}',
      'email' => '${defaultUser.email}',
      'password' => bcrypt('${defaultUser.password}'),
      'role' => '${defaultUser.role}',
      'email_verified_at' => ${defaultUser.email_verified_at}
    ])->toArray());
  " --env=testing`;
  
  const { stdout } = await execAsync(command);
  return JSON.parse(stdout.trim());
}

export async function createCreator(userOverrides: any = {}, creatorOverrides: any = {}) {
  const user = await createUser({ role: 'creator', ...userOverrides });
  
  const defaultCreator = {
    bio: 'Expert gaming coach',
    platform_name: 'TestCreator',
    platform_url: 'https://twitch.tv/testcreator',
    type: 'Gaming',
    timezone: 'America/Toronto',
    ...creatorOverrides
  };
  
  const command = `php artisan tinker --execute="
    echo json_encode(\\App\\Models\\Creator::factory()->create([
      'user_id' => ${user.id},
      'bio' => '${defaultCreator.bio}',
      'platform_name' => '${defaultCreator.platform_name}',
      'platform_url' => '${defaultCreator.platform_url}',
      'type' => '${defaultCreator.type}',
      'timezone' => '${defaultCreator.timezone}'
    ])->toArray());
  " --env=testing`;
  
  const { stdout } = await execAsync(command);
  return { user, creator: JSON.parse(stdout.trim()) };
}
```

### auth-helpers.ts
```typescript
import { Page, expect } from '@playwright/test';

export async function loginAs(page: Page, email: string, password: string = 'password') {
  await page.goto('/login');
  await page.fill('[data-testid="email-input"]', email);
  await page.fill('[data-testid="password-input"]', password);
  await page.click('[data-testid="submit-button"]');
  
  // Attendre redirection
  await page.waitForURL(/\/(dashboard|creator)/);
}

export async function registerUser(page: Page, userData: any) {
  await page.goto('/register');
  
  // Sélectionner rôle
  await page.click(`[data-testid="role-${userData.role}"]`);
  
  // Remplir formulaire
  await page.fill('[data-testid="first-name-input"]', userData.first_name);
  await page.fill('[data-testid="last-name-input"]', userData.last_name);
  await page.fill('[data-testid="email-input"]', userData.email);
  await page.fill('[data-testid="password-input"]', userData.password);
  await page.fill('[data-testid="password-confirmation-input"]', userData.password);
  
  // Submit
  await page.click('[data-testid="submit-button"]');
}

export async function expectCustomerDashboard(page: Page) {
  await expect(page).toHaveURL(/\/dashboard/);
  await expect(page.locator('[data-testid="customer-dashboard"]')).toBeVisible();
}

export async function expectCreatorDashboard(page: Page) {
  await expect(page).toHaveURL(/\/creator\/dashboard/);
  await expect(page.locator('[data-testid="creator-dashboard"]')).toBeVisible();
}

export async function expectCreatorSetup(page: Page) {
  await expect(page).toHaveURL(/\/creator\/setup/);
  await expect(page.locator('[data-testid="setup-wizard"]')).toBeVisible();
}
```

## 🧪 Tests Auth Essentiels

### login-flow.spec.ts
```typescript
import { test, expect } from '@playwright/test';
import { resetDatabase, createUser, createCreator } from '../utils/database-helpers';
import { loginAs, expectCustomerDashboard, expectCreatorDashboard, expectCreatorSetup } from '../utils/auth-helpers';

test.describe('Login Flow', () => {
  test.beforeEach(async () => {
    await resetDatabase();
  });

  test('customer login redirects to customer dashboard', async ({ page }) => {
    await createUser({ role: 'customer', email: 'customer@test.com' });
    
    await loginAs(page, 'customer@test.com');
    await expectCustomerDashboard(page);
  });

  test('complete creator login redirects to creator dashboard', async ({ page }) => {
    await createCreator({ email: 'creator@test.com' });
    
    await loginAs(page, 'creator@test.com');
    await expectCreatorDashboard(page);
  });

  test('incomplete creator login redirects to setup', async ({ page }) => {
    await createUser({ role: 'creator', email: 'incomplete@test.com' });
    
    await loginAs(page, 'incomplete@test.com');
    await expectCreatorSetup(page);
  });

  test('shows error for invalid credentials', async ({ page }) => {
    await page.goto('/login');
    await page.fill('[data-testid="email-input"]', 'wrong@test.com');
    await page.fill('[data-testid="password-input"]', 'wrongpassword');
    await page.click('[data-testid="submit-button"]');
    
    await expect(page.locator('[data-testid="validation-error"]')).toBeVisible();
    await expect(page.locator('[data-testid="validation-error"]')).toContainText('identifiants');
  });

  test('prevents login for unverified email', async ({ page }) => {
    await createUser({ 
      email: 'unverified@test.com',
      email_verified_at: null 
    });
    
    await page.goto('/login');
    await page.fill('[data-testid="email-input"]', 'unverified@test.com');
    await page.fill('[data-testid="password-input"]', 'password');
    await page.click('[data-testid="submit-button"]');
    
    await expect(page).toHaveURL(/\/email\/verify/);
  });

  test('remember me functionality works', async ({ page }) => {
    await createUser({ email: 'customer@test.com' });
    
    await page.goto('/login');
    await page.fill('[data-testid="email-input"]', 'customer@test.com');
    await page.fill('[data-testid="password-input"]', 'password');
    await page.check('[data-testid="remember-checkbox"]');
    await page.click('[data-testid="submit-button"]');
    
    await expectCustomerDashboard(page);
    
    // Vérifier cookie remember
    const cookies = await page.context().cookies();
    const rememberCookie = cookies.find(c => c.name.includes('remember'));
    expect(rememberCookie).toBeTruthy();
  });
});
```

### registration-flow.spec.ts
```typescript
import { test, expect } from '@playwright/test';
import { resetDatabase, createUser } from '../utils/database-helpers';
import { registerUser } from '../utils/auth-helpers';

test.describe('Registration Flow', () => {
  test.beforeEach(async () => {
    await resetDatabase();
  });

  test('customer registration success', async ({ page }) => {
    const userData = {
      first_name: 'John',
      last_name: 'Doe', 
      email: 'john@test.com',
      password: 'password123',
      role: 'customer'
    };

    await registerUser(page, userData);
    
    // Should redirect to email verification
    await expect(page).toHaveURL(/\/email\/verify/);
    await expect(page.locator('[data-testid="verification-message"]')).toBeVisible();
  });

  test('creator registration redirects to email verification', async ({ page }) => {
    const userData = {
      first_name: 'Jane',
      last_name: 'Creator',
      email: 'jane@test.com', 
      password: 'password123',
      role: 'creator'
    };

    await registerUser(page, userData);
    
    // Should redirect to email verification first
    await expect(page).toHaveURL(/\/email\/verify/);
  });

  test('shows validation errors for empty form', async ({ page }) => {
    await page.goto('/register');
    await page.click('[data-testid="submit-button"]');
    
    await expect(page.locator('[data-testid="validation-error"]')).toBeVisible();
  });

  test('prevents registration with existing email', async ({ page }) => {
    await createUser({ email: 'existing@test.com' });
    
    const userData = {
      first_name: 'Test',
      last_name: 'User',
      email: 'existing@test.com',
      password: 'password123',
      role: 'customer'
    };

    await registerUser(page, userData);
    
    await expect(page.locator('[data-testid="validation-error"]')).toContainText('déjà utilisé');
  });

  test('validates password confirmation', async ({ page }) => {
    await page.goto('/register');
    await page.click('[data-testid="role-customer"]');
    
    await page.fill('[data-testid="first-name-input"]', 'Test');
    await page.fill('[data-testid="last-name-input"]', 'User');
    await page.fill('[data-testid="email-input"]', 'test@test.com');
    await page.fill('[data-testid="password-input"]', 'password123');
    await page.fill('[data-testid="password-confirmation-input"]', 'different');
    
    await page.click('[data-testid="submit-button"]');
    
    await expect(page.locator('[data-testid="validation-error"]')).toContainText('confirmation');
  });
});
```

### creator-setup.spec.ts
```typescript
import { test, expect } from '@playwright/test';
import { resetDatabase, createUser } from '../utils/database-helpers';
import { loginAs, expectCreatorDashboard } from '../utils/auth-helpers';

test.describe('Creator Setup Wizard', () => {
  test.beforeEach(async () => {
    await resetDatabase();
  });

  test('completes creator setup successfully', async ({ page }) => {
    await createUser({ role: 'creator', email: 'creator@test.com' });
    await loginAs(page, 'creator@test.com');
    
    // Should be on setup page
    await expect(page).toHaveURL(/\/creator\/setup/);
    
    // Fill setup form
    await page.fill('[data-testid="bio-input"]', 'Expert gaming coach specializing in FPS');
    await page.fill('[data-testid="platform-name-input"]', 'ProGamerCoach');
    await page.fill('[data-testid="platform-url-input"]', 'https://twitch.tv/progamercoach');
    await page.selectOption('[data-testid="type-select"]', 'Gaming');
    await page.selectOption('[data-testid="timezone-select"]', 'America/Toronto');
    
    await page.click('[data-testid="complete-setup-button"]');
    
    // Should redirect to creator dashboard
    await expectCreatorDashboard(page);
    await expect(page.locator('[data-testid="success-message"]')).toContainText('configuré avec succès');
  });

  test('validates required setup fields', async ({ page }) => {
    await createUser({ role: 'creator', email: 'creator@test.com' });
    await loginAs(page, 'creator@test.com');
    
    // Try to submit empty form
    await page.click('[data-testid="complete-setup-button"]');
    
    await expect(page.locator('[data-testid="validation-error"]')).toBeVisible();
  });

  test('validates platform_name uniqueness', async ({ page }) => {
    // Create existing creator
    await createCreator({}, { platform_name: 'ExistingCreator' });
    
    // Create new creator to setup
    await createUser({ role: 'creator', email: 'new@test.com' });
    await loginAs(page, 'new@test.com');
    
    // Try to use existing platform name
    await page.fill('[data-testid="platform-name-input"]', 'ExistingCreator');
    await page.fill('[data-testid="bio-input"]', 'Test bio');
    await page.click('[data-testid="complete-setup-button"]');
    
    await expect(page.locator('[data-testid="validation-error"]')).toContainText('déjà utilisé');
  });

  test('validates URL format', async ({ page }) => {
    await createUser({ role: 'creator', email: 'creator@test.com' });
    await loginAs(page, 'creator@test.com');
    
    await page.fill('[data-testid="platform-url-input"]', 'not-a-valid-url');
    await page.click('[data-testid="complete-setup-button"]');
    
    await expect(page.locator('[data-testid="validation-error"]')).toContainText('URL valide');
  });
});
```

### email-verification.spec.ts
```typescript
import { test, expect } from '@playwright/test';
import { resetDatabase, createUser } from '../utils/database-helpers';

test.describe('Email Verification', () => {
  test.beforeEach(async () => {
    await resetDatabase();
  });

  test('shows verification page for unverified user', async ({ page }) => {
    await createUser({ 
      email: 'unverified@test.com',
      email_verified_at: null 
    });
    
    await page.goto('/login');
    await page.fill('[data-testid="email-input"]', 'unverified@test.com');
    await page.fill('[data-testid="password-input"]', 'password');
    await page.click('[data-testid="submit-button"]');
    
    await expect(page).toHaveURL(/\/email\/verify/);
    await expect(page.locator('[data-testid="verification-notice"]')).toBeVisible();
    await expect(page.locator('[data-testid="resend-button"]')).toBeVisible();
  });

  test('resend verification email works', async ({ page }) => {
    await createUser({ 
      email: 'unverified@test.com',
      email_verified_at: null 
    });
    
    await page.goto('/email/verify');
    await page.click('[data-testid="resend-button"]');
    
    await expect(page.locator('[data-testid="resend-success"]')).toBeVisible();
    await expect(page.locator('[data-testid="resend-success"]')).toContainText('envoyé');
  });

  test('verified users skip verification page', async ({ page }) => {
    await createUser({ email: 'verified@test.com' }); // email_verified_at default = now()
    
    await page.goto('/login');
    await page.fill('[data-testid="email-input"]', 'verified@test.com');
    await page.fill('[data-testid="password-input"]', 'password');
    await page.click('[data-testid="submit-button"]');
    
    // Should go directly to dashboard, not verification
    await expect(page).toHaveURL(/\/dashboard/);
  });
});
```

## 🎯 Templates Laravel avec data-testid

### Login Form
```html
<!-- resources/views/auth/login.blade.php -->
<form method="POST" action="{{ route('login') }}" data-testid="login-form">
    @csrf
    
    <input 
        name="email" 
        type="email" 
        data-testid="email-input"
        required 
    />
    
    <input 
        name="password" 
        type="password" 
        data-testid="password-input"
        required 
    />
    
    <input 
        type="checkbox" 
        name="remember"
        data-testid="remember-checkbox"
    />
    
    @if ($errors->any())
        <div data-testid="validation-error">
            {{ $errors->first() }}
        </div>
    @endif
    
    <button type="submit" data-testid="submit-button">
        Se connecter
    </button>
</form>
```

### Registration Form
```html
<!-- resources/views/auth/register.blade.php -->
<form method="POST" action="{{ route('register') }}" data-testid="register-form">
    @csrf
    
    <!-- Role Selection -->
    <div data-testid="role-customer">Je veux réserver</div>
    <div data-testid="role-creator">Je veux enseigner</div>
    
    <input name="first_name" data-testid="first-name-input" required />
    <input name="last_name" data-testid="last-name-input" required />
    <input name="email" type="email" data-testid="email-input" required />
    <input name="password" type="password" data-testid="password-input" required />
    <input name="password_confirmation" type="password" data-testid="password-confirmation-input" required />
    
    <button type="submit" data-testid="submit-button">S'inscrire</button>
</form>
```

### Creator Setup
```html
<!-- resources/views/creator/setup.blade.php -->
<form method="POST" action="{{ route('creator.setup') }}" data-testid="setup-wizard">
    @csrf
    
    <textarea name="bio" data-testid="bio-input" required></textarea>
    <input name="platform_name" data-testid="platform-name-input" required />
    <input name="platform_url" data-testid="platform-url-input" type="url" required />
    <select name="type" data-testid="type-select" required>
        <option value="Gaming">Gaming</option>
        <option value="Coaching">Coaching</option>
    </select>
    <select name="timezone" data-testid="timezone-select" required>
        <option value="America/Toronto">Toronto</option>
        <option value="Europe/Paris">Paris</option>
    </select>
    
    <button type="submit" data-testid="complete-setup-button">
        Terminer la configuration
    </button>
</form>
```

## ⚙️ Configuration Laravel

### .env.testing
```
APP_ENV=testing
APP_URL=http://localhost:8000
DB_CONNECTION=sqlite
DB_DATABASE=:memory:
MAIL_MAILER=array
SESSION_DRIVER=array
```

### Scripts package.json
```json
{
  "scripts": {
    "test:e2e": "playwright test",
    "test:e2e:headed": "playwright test --headed", 
    "test:e2e:debug": "playwright test --debug",
    "test:e2e:ui": "playwright test --ui"
  }
}
```

## 🚀 Résultat attendu

Suite de tests E2E Playwright qui valide:
- ✅ **Login flows** pour tous les rôles avec redirections appropriées
- ✅ **Registration flows** customer/creator avec validation
- ✅ **Creator setup wizard** complet avec validation métier
- ✅ **Email verification** flow complet
- ✅ **Form validation** robuste avec messages d'erreur
- ✅ **Remember me** et session management

## 📊 Métriques de succès
- Tests stables et rapides (< 30s total)
- Zero flaky tests grâce à la robustesse Playwright
- Screenshots automatiques sur échecs
- Couverture complète des workflows auth critiques
- Maintenance facile avec sélecteurs data-testid