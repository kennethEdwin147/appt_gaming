# Instructions Auth Controllers - Gaming Platform

## CONTROLLERS AUTH À CRÉER

Créer les controllers suivants dans `app/Http/Controllers/Auth/` :

- **AuthController** (register/login/logout + gestion rôles)
- **EmailVerificationController** (confirmation email)
- **PasswordResetController** (reset mot de passe)
- **CreatorSetupController** (wizard setup créateur simplifié)

## STRUCTURE GÉNÉRALE

- **Namespace :** `App\Http\Controllers\Auth`
- **Services :** Utiliser EmailService pour notifications
- **Gestion rôles :** client vs créateur
- **Redirections :** Appropriées selon rôle après auth
- **Middleware :** guest pour register/login, auth pour logout/setup
- **Validation :** Inline dans les controllers

## MÉTHODES PAR CONTROLLER

### AuthController
```php
// Pages d'inscription
- showChooseRole() : page choix client/créateur (/register)
- showClientRegister() : formulaire inscription client (/register/client)
- showCreatorRegister() : formulaire inscription créateur (/register/creator)

// Traitement inscriptions
- registerClient() : créer compte client (role: customer)
- registerCreator() : créer compte créateur (role: creator)

// Authentication
- showLogin() : formulaire login unifiée (/login)
- login() : traitement login + redirect selon rôle
- logout() : déconnexion + redirect home
```

### EmailVerificationController
```php
- notice() : page "vérifiez votre email" (/email/verify)
- verify() : traitement lien vérification (/email/verify/{id}/{hash})
- resend() : renvoyer email vérification (/email/verification-notification)
```

### PasswordResetController
```php
- showForgotForm() : page "mot de passe oublié" (/forgot-password)
- sendResetLink() : envoyer email reset (/forgot-password)
- showResetForm() : page nouveau mot de passe (/reset-password/{token})
- reset() : traitement nouveau mot de passe (/reset-password)
```

### CreatorSetupController (Simplifié)
```php
- showTimezone() : étape 1 - sélection timezone (/creator/setup/timezone)
- saveTimezone() : sauver timezone et passer à l'étape 2
- showProfile() : étape 2 - bio et infos de base (/creator/setup/profile)
- saveProfile() : sauver bio et finaliser setup
- complete() : redirection vers dashboard créateur
```

## VALIDATION EXAMPLES

```php
// AuthController::registerClient()
$request->validate([
    'first_name' => 'required|string|max:255',
    'last_name' => 'required|string|max:255',
    'email' => 'required|string|email|max:255|unique:users',
    'password' => 'required|string|min:8|confirmed',
]);

// AuthController::registerCreator()
$request->validate([
    'first_name' => 'required|string|max:255',
    'last_name' => 'required|string|max:255',
    'email' => 'required|string|email|max:255|unique:users',
    'password' => 'required|string|min:8|confirmed',
    'gaming_pseudo' => 'required|string|max:50|unique:creators,gaming_pseudo',
]);

// AuthController::login()
$request->validate([
    'email' => 'required|email',
    'password' => 'required',
]);

// CreatorSetupController::saveProfile()
$request->validate([
    'bio' => 'required|string|max:500',
    'main_game' => 'nullable|string|max:100',
    'rank_info' => 'nullable|string|max:100',
]);
```

## LOGIQUE D'INSCRIPTION

### Client Registration Flow
```php
public function registerClient(Request $request)
{
    // 1. Validation
    $validated = $request->validate([...]);
    
    // 2. Créer User
    $user = User::create([
        'first_name' => $validated['first_name'],
        'last_name' => $validated['last_name'],
        'email' => $validated['email'],
        'password' => Hash::make($validated['password']),
        'role' => 'customer',
    ]);
    
    // 3. Créer Customer
    Customer::create(['user_id' => $user->id]);
    
    // 4. Envoyer email vérification
    $user->sendEmailVerificationNotification();
    
    // 5. Login automatique
    Auth::login($user);
    
    // 6. Redirect vers vérification
    return redirect()->route('verification.notice')
        ->with('success', 'Compte créé ! Vérifiez votre email.');
}
```

### Creator Registration Flow
```php
public function registerCreator(Request $request)
{
    // 1. Validation
    $validated = $request->validate([...]);
    
    // 2. Créer User
    $user = User::create([
        'first_name' => $validated['first_name'],
        'last_name' => $validated['last_name'],
        'email' => $validated['email'],
        'password' => Hash::make($validated['password']),
        'role' => 'creator',
    ]);
    
    // 3. Créer Creator de base
    Creator::create([
        'user_id' => $user->id,
        'gaming_pseudo' => $validated['gaming_pseudo'],
    ]);
    
    // 4. Envoyer email vérification
    $user->sendEmailVerificationNotification();
    
    // 5. Login automatique
    Auth::login($user);
    
    // 6. Redirect vers vérification (setup après)
    return redirect()->route('verification.notice')
        ->with('success', 'Compte créateur créé ! Vérifiez votre email.');
}
```

## REDIRECTIONS APRÈS LOGIN

```php
public function login(Request $request)
{
    $credentials = $request->validate([...]);
    
    if (Auth::attempt($credentials, $request->boolean('remember'))) {
        $request->session()->regenerate();
        
        $user = Auth::user();
        
        // Vérifier si email vérifié
        if (!$user->hasVerifiedEmail()) {
            return redirect()->route('verification.notice');
        }
        
        // Redirection selon rôle et état
        if ($user->role === 'creator') {
            $creator = $user->creator;
            
            // Si setup pas terminé, rediriger vers setup
            if (!$creator->timezone || !$creator->bio) {
                return redirect()->route('creator.setup.timezone');
            }
            
            return redirect()->route('creator.dashboard');
        }
        
        if ($user->role === 'customer') {
            return redirect()->route('customer.dashboard');
        }
        
        return redirect()->intended('/');
    }
    
    return back()->withErrors([
        'email' => 'Identifiants incorrects.',
    ])->onlyInput('email');
}
```

## CREATOR SETUP WIZARD

### Étape 1 - Timezone
```php
public function showTimezone()
{
    // Si déjà configuré, passer à l'étape suivante
    if (auth()->user()->creator->timezone) {
        return redirect()->route('creator.setup.profile');
    }
    
    return view('auth.creator-setup.timezone', [
        'timezones' => Timezone::getTimezonesByRegion()
    ]);
}

public function saveTimezone(Request $request)
{
    $request->validate([
        'timezone' => 'required|string',
    ]);
    
    auth()->user()->creator->update([
        'timezone' => $request->timezone
    ]);
    
    return redirect()->route('creator.setup.profile')
        ->with('success', 'Fuseau horaire sauvegardé !');
}
```

### Étape 2 - Profile (Final)
```php
public function showProfile()
{
    $creator = auth()->user()->creator;
    
    // Si pas de timezone, retourner à l'étape 1
    if (!$creator->timezone) {
        return redirect()->route('creator.setup.timezone');
    }
    
    return view('auth.creator-setup.profile', compact('creator'));
}

public function saveProfile(Request $request)
{
    $validated = $request->validate([
        'bio' => 'required|string|max:500',
        'main_game' => 'nullable|string|max:100',
        'rank_info' => 'nullable|string|max:100',
        'default_hourly_rate' => 'required|numeric|min:5|max:500',
    ]);
    
    auth()->user()->creator->update($validated);
    
    return $this->complete();
}

public function complete()
{
    // Marquer le setup comme terminé
    auth()->user()->creator->update([
        'setup_completed_at' => now()
    ]);
    
    return redirect()->route('creator.dashboard')
        ->with('success', 'Profil créateur configuré avec succès !');
}
```

## EMAIL VERIFICATION

```php
public function verify(EmailVerificationRequest $request)
{
    if ($request->user()->hasVerifiedEmail()) {
        // Si créateur et setup pas fini, rediriger vers setup
        if ($request->user()->role === 'creator') {
            $creator = $request->user()->creator;
            if (!$creator->timezone || !$creator->bio) {
                return redirect()->route('creator.setup.timezone');
            }
            return redirect()->route('creator.dashboard');
        }
        
        return redirect()->intended('/');
    }

    if ($request->user()->markEmailAsVerified()) {
        event(new Verified($request->user()));
    }

    // Même logique de redirection après vérification
    return $this->redirectAfterEmailVerification($request->user());
}

private function redirectAfterEmailVerification(User $user)
{
    if ($user->role === 'creator') {
        $creator = $user->creator;
        if (!$creator->timezone || !$creator->bio) {
            return redirect()->route('creator.setup.timezone')
                ->with('success', 'Email vérifié ! Terminons la configuration.');
        }
        return redirect()->route('creator.dashboard');
    }
    
    return redirect()->route('customer.dashboard')
        ->with('success', 'Email vérifié avec succès !');
}
```

## MIDDLEWARE À APPLIQUER

```php
// Routes guest (non connectés)
Route::middleware('guest')->group(function () {
    Route::get('/register', [AuthController::class, 'showChooseRole']);
    Route::get('/register/client', [AuthController::class, 'showClientRegister']);
    Route::get('/register/creator', [AuthController::class, 'showCreatorRegister']);
    Route::post('/register/client', [AuthController::class, 'registerClient']);
    Route::post('/register/creator', [AuthController::class, 'registerCreator']);
    Route::get('/login', [AuthController::class, 'showLogin']);
    Route::post('/login', [AuthController::class, 'login']);
});

// Routes auth (connectés)
Route::middleware('auth')->group(function () {
    Route::post('/logout', [AuthController::class, 'logout']);
    
    // Setup créateur (middleware spécialisé)
    Route::middleware('creator.setup')->group(function () {
        Route::get('/creator/setup/timezone', [CreatorSetupController::class, 'showTimezone']);
        Route::post('/creator/setup/timezone', [CreatorSetupController::class, 'saveTimezone']);
        Route::get('/creator/setup/profile', [CreatorSetupController::class, 'showProfile']);
        Route::post('/creator/setup/profile', [CreatorSetupController::class, 'saveProfile']);
    });
});
```

## GESTION D'ERREURS

```php
try {
    // Logic auth...
    
    if ($request->expectsJson()) {
        return response()->json(['success' => true, 'redirect' => $redirectUrl]);
    }
    
    return redirect($redirectUrl)->with('success', $message);
    
} catch (\Exception $e) {
    if ($request->expectsJson()) {
        return response()->json(['error' => 'Erreur lors de l\'inscription'], 422);
    }
    
    return redirect()->back()
                   ->with('error', 'Une erreur est survenue')
                   ->withInput();
}
```

## PATTERN CONTROLLER AUTH

```php
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Creator;
use App\Models\Customer;
use App\Services\EmailService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;

class AuthController extends Controller
{
    public function __construct(
        private EmailService $emailService
    ) {}

    public function showChooseRole()
    {
        return view('auth.choose-role');
    }

    public function registerClient(Request $request)
    {
        $validated = $request->validate([
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        try {
            $user = User::create([
                'first_name' => $validated['first_name'],
                'last_name' => $validated['last_name'],
                'email' => $validated['email'],
                'password' => Hash::make($validated['password']),
                'role' => 'customer',
            ]);

            Customer::create(['user_id' => $user->id]);
            
            $user->sendEmailVerificationNotification();
            Auth::login($user);

            return redirect()->route('verification.notice')
                           ->with('success', 'Compte créé ! Vérifiez votre email.');
                           
        } catch (\Exception $e) {
            return redirect()->back()
                           ->with('error', 'Erreur lors de la création du compte')
                           ->withInput();
        }
    }
}
```

## NOTES IMPORTANTES

- Gérer les sessions et CSRF tokens
- Valider toutes les entrées utilisateur
- Hasher les mots de passe avec Hash::make()
- Envoyer les emails de vérification automatiquement
- Rediriger selon le rôle et l'état de configuration
- Gérer les erreurs avec try/catch
- Maintenir l'état du wizard de setup
- Utiliser les Services pour les emails et logique métier