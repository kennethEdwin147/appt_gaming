# Instructions Tests Auth Unit - Gaming Platform

## üìÅ Structure √† cr√©er

```
tests/
‚îú‚îÄ‚îÄ Traits/
‚îÇ   ‚îî‚îÄ‚îÄ CreatesTestData.php
‚îî‚îÄ‚îÄ Unit/
    ‚îî‚îÄ‚îÄ Auth/
        ‚îú‚îÄ‚îÄ AuthControllerTest.php
        ‚îú‚îÄ‚îÄ CreatorSetupControllerTest.php
        ‚îú‚îÄ‚îÄ EmailVerificationControllerTest.php
        ‚îî‚îÄ‚îÄ PasswordResetControllerTest.php
```

## üß™ Cr√©er le trait CreatesTestData

**Fichier :** `tests/Traits/CreatesTestData.php`

**Contenu :** Trait avec m√©thodes helper :
- `createUser($role = 'customer', $attributes = [])` - Cr√©er utilisateur
- `createCreator($attributes = [])` - Cr√©er cr√©ateur avec user
- `createCustomer($attributes = [])` - Cr√©er customer avec user  
- `createEventType($creator = null, $attributes = [])` - Cr√©er event type
- `createAvailability($creator = null, $attributes = [])` - Cr√©er availability
- `createTimeSlot($creator = null, $attributes = [])` - Cr√©er time slot
- `actingAsCreator($attributes = [])` - Login comme cr√©ateur
- `actingAsCustomer($attributes = [])` - Login comme customer

## üîß Modifier TestCase.php

**Fichier :** `tests/TestCase.php`

**Ajouter :**
- `use RefreshDatabase, CreatesTestData`
- `Mail::fake()` dans setUp()
- `Event::fake()` dans setUp()

## üéØ Tests AuthControllerTest.php

**Fichier :** `tests/Unit/Auth/AuthControllerTest.php`

**Tests √† cr√©er :**

### Tests d'inscription
- `it_can_register_a_client()` - Inscription client r√©ussie
- `it_can_register_a_creator()` - Inscription cr√©ateur avec gaming_pseudo
- `it_validates_required_fields_on_registration()` - Validation champs requis
- `it_prevents_duplicate_emails()` - Email unique
- `it_prevents_duplicate_gaming_pseudo()` - Gaming pseudo unique
- `it_sends_verification_email_on_registration()` - Email envoy√©

### Tests de connexion
- `it_can_login_with_valid_credentials()` - Login r√©ussi
- `it_rejects_invalid_credentials()` - Login √©chou√©
- `it_redirects_creator_to_setup_after_login()` - Redirect setup si timezone null
- `it_redirects_creator_to_dashboard_when_setup_complete()` - Redirect dashboard si setup OK
- `it_redirects_customer_to_dashboard_after_login()` - Redirect customer
- `it_redirects_to_verification_if_email_not_verified()` - Email non v√©rifi√©

### Tests de d√©connexion
- `it_can_logout()` - Logout + redirect home
- `it_clears_session_on_logout()` - Session vid√©e

## üéØ Tests CreatorSetupControllerTest.php

**Fichier :** `tests/Unit/Auth/CreatorSetupControllerTest.php`

**Tests √† cr√©er :**

### √âtape 1 - Timezone
- `it_shows_timezone_selection()` - Affichage page timezone
- `it_can_save_timezone()` - Sauvegarde timezone
- `it_redirects_to_profile_after_timezone()` - Redirect √©tape 2
- `it_skips_timezone_if_already_set()` - Skip si d√©j√† configur√©

### √âtape 2 - Profile
- `it_shows_profile_setup()` - Affichage page profil
- `it_requires_timezone_before_profile()` - Emp√™che skip √©tape 1
- `it_can_save_profile()` - Sauvegarde profil complet
- `it_validates_profile_fields()` - Validation bio, rate, etc.
- `it_marks_setup_as_completed()` - setup_completed_at d√©fini
- `it_redirects_to_dashboard_after_completion()` - Redirect final

### S√©curit√©
- `it_requires_authentication()` - Middleware auth
- `it_requires_creator_role()` - Seuls les cr√©ateurs

## üéØ Tests EmailVerificationControllerTest.php

**Fichier :** `tests/Unit/Auth/EmailVerificationControllerTest.php`

**Tests √† cr√©er :**

### Pages
- `it_shows_verification_notice()` - Page "v√©rifiez email"
- `it_redirects_verified_users_from_notice()` - Skip si d√©j√† v√©rifi√©

### V√©rification
- `it_can_verify_email()` - V√©rification avec token valide
- `it_rejects_invalid_verification_token()` - Token invalide
- `it_marks_email_as_verified()` - email_verified_at d√©fini
- `it_can_resend_verification_email()` - Renvoi email

### Redirections apr√®s v√©rification
- `it_redirects_creator_to_setup_after_verification()` - Flow cr√©ateur incomplet
- `it_redirects_creator_to_dashboard_if_setup_complete()` - Flow cr√©ateur complet
- `it_redirects_customer_to_dashboard_after_verification()` - Flow customer

## üéØ Tests PasswordResetControllerTest.php

**Fichier :** `tests/Unit/Auth/PasswordResetControllerTest.php`

**Tests √† cr√©er :**

### Pages
- `it_shows_forgot_password_form()` - Page forgot password
- `it_shows_reset_form_with_valid_token()` - Page reset avec token
- `it_rejects_invalid_reset_token()` - Token invalide

### Envoi link
- `it_can_send_reset_link()` - Envoi link reset
- `it_validates_email_exists()` - Email doit exister
- `it_sends_reset_email()` - Email effectivement envoy√©

### Reset password
- `it_can_reset_password()` - Reset r√©ussi
- `it_validates_password_confirmation()` - Confirmation password
- `it_updates_password_hash()` - Hash mis √† jour
- `it_redirects_to_login_after_reset()` - Redirect apr√®s reset

## üìß V√©rifications emails

**Dans chaque test email :**
```php
// Email envoy√©
Mail::assertSent(NotificationClass::class);

// Email envoy√© au bon user
Mail::assertSent(NotificationClass::class, function ($mail) use ($user) {
    return $mail->hasTo($user->email);
});

// Contenu email
Mail::assertSent(NotificationClass::class, function ($mail) use ($data) {
    return $mail->data->id === $data->id;
});
```

## üéÆ Donn√©es de test gaming

### Cr√©ateur gaming
```php
$creatorData = [
    'first_name' => 'ProGamer',
    'last_name' => 'Elite',
    'email' => 'progamer@example.com',
    'password' => 'password123',
    'password_confirmation' => 'password123',
    'gaming_pseudo' => 'ProGamer2024',
];
```

### Setup cr√©ateur
```php
$setupData = [
    'timezone' => 'America/Toronto',
    'bio' => 'Coach Valorant expert avec 5 ans d\'exp√©rience',
    'main_game' => 'Valorant',
    'rank_info' => 'Radiant',
    'default_hourly_rate' => 75.00,
];
```

## üìä Assertions importantes

### Base de donn√©es
```php
$this->assertDatabaseHas('users', ['email' => $email]);
$this->assertDatabaseHas('creators', ['gaming_pseudo' => $pseudo]);
$this->assertDatabaseMissing('users', ['email' => $email]);
```

### Authentification
```php
$this->assertAuthenticated();
$this->assertGuest();
$this->assertEquals('creator', auth()->user()->role);
```

### Redirections
```php
$response->assertRedirect('/creator/dashboard');
$response->assertRedirect('/creator/setup/timezone');
$response->assertRedirect('/email/verify');
```

### Validation
```php
$response->assertSessionHasErrors(['email', 'password']);
$response->assertSessionHasNoErrors();
```

### Messages flash
```php
$response->assertSessionHas('success', 'Message attendu');
$response->assertSessionHas('error');
```

## üöÄ Commandes √† ex√©cuter

```bash
# Cr√©er les dossiers
mkdir -p tests/Traits tests/Unit/Auth

# Cr√©er les fichiers de test
php artisan make:test Auth/AuthControllerTest --unit
php artisan make:test Auth/CreatorSetupControllerTest --unit
php artisan make:test Auth/EmailVerificationControllerTest --unit
php artisan make:test Auth/PasswordResetControllerTest --unit

# Lancer les tests
php artisan test tests/Unit/Auth
```

## üìù Structure des tests

**Pattern Arrange-Act-Assert :**
```php
/** @test */
public function it_can_do_something()
{
    // Arrange
    $user = $this->createUser();
    $data = ['key' => 'value'];
    
    // Act
    $response = $this->post('/endpoint', $data);
    
    // Assert
    $this->assertDatabaseHas('table', $data);
    $response->assertRedirect('/success');
}
```

## üéØ Points critiques √† tester

- **Gaming pseudo unique** pour cr√©ateurs
- **Flow wizard setup** cr√©ateur (timezone ‚Üí profile)
- **Redirections selon r√¥le** et √©tat setup
- **Emails Resend** envoy√©s correctement
- **Sessions g√©r√©es** correctement
- **Validation compl√®te** des formulaires
- **S√©curit√©** (auth, r√¥les, tokens)

## üìã Checklist validation

- [ ] Tous les tests passent
- [ ] Coverage > 80% sur Auth controllers
- [ ] Emails mock√©s correctement
- [ ] Base de donn√©es refresh entre tests
- [ ] Pas de side effects entre tests
- [ ] Gaming pseudo test√© sp√©cifiquement
- [ ] Setup wizard complet test√©
