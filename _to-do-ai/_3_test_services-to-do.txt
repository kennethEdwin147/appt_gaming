# Instructions Tests Services Unit - Gaming Platform

## 📁 Structure à créer

```
tests/Unit/Services/
├── AvailabilityServiceTest.php ❌ (à créer - PRIORITÉ)
├── ReservationServiceTest.php ❌ (à créer - PRIORITÉ)
├── EmailServiceTest.php ❌ (pour plus tard)
└── ReminderServiceTest.php ❌ (pour plus tard)
```

**Focus maintenant :** Seulement AvailabilityService et ReservationService
**Plus tard :** EmailService et ReminderService

## 🧪 Setup général pour tous les Services

**Utiliser le trait :** `CreatesTestData` (déjà créé dans Auth tests)

**Dans chaque ServiceTest :**
```php
<?php

namespace Tests\Unit\Services;

use Tests\TestCase;
use Tests\Traits\CreatesTestData;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Notification;

class ServiceNameTest extends TestCase
{
    use CreatesTestData;
    
    protected $serviceName;
    
    protected function setUp(): void
    {
        parent::setUp();
        $this->serviceName = app(ServiceClass::class);
        
        // Fake emails/notifications
        Mail::fake();
        Notification::fake();
    }
}
```

## 🎯 Tests AvailabilityServiceTest.php

**Fichier :** `tests/Unit/Services/AvailabilityServiceTest.php`

**Service à tester :** `App\Services\AvailabilityService`

### Tests génération time slots
- `it_can_generate_time_slots_for_creator()` - Génération slots basique
- `it_generates_slots_for_correct_dates()` - Dates correctes
- `it_respects_availability_hours()` - Horaires availability respectés
- `it_generates_30_minute_slots_by_default()` - Slots de 30min
- `it_uses_creator_timezone()` - Timezone du créateur
- `it_marks_slots_as_recurring()` - is_recurring_slot = true
- `it_creates_slots_for_multiple_days()` - Plusieurs jours
- `it_skips_days_without_availability()` - Pas d'availability = pas de slots

### Tests récupération slots disponibles  
- `it_can_get_available_slots_for_event_type()` - Slots disponibles
- `it_only_returns_available_status_slots()` - Seulement status 'available'
- `it_filters_by_event_duration()` - Durée événement compatible
- `it_organizes_slots_by_date()` - Organisé par date
- `it_converts_to_user_timezone()` - Timezone utilisateur
- `it_includes_custom_price_if_set()` - Prix custom slot
- `it_excludes_past_slots()` - Pas de slots passés

### Tests booking/release slots
- `it_can_book_available_time_slot()` - Réserver slot disponible
- `it_cannot_book_unavailable_slot()` - Empêche réserver occupé
- `it_cannot_book_past_slot()` - Empêche réserver passé
- `it_can_release_booked_slot()` - Libérer slot réservé
- `it_cannot_release_available_slot()` - Empêche libérer déjà libre

### Tests blocage manuel
- `it_can_block_time_slot()` - Créateur bloque slot
- `it_can_unblock_time_slot()` - Créateur débloque slot
- `it_cannot_block_past_slot()` - Empêche bloquer passé
- `it_saves_creator_notes_when_blocking()` - Notes de blocage

### Tests statistiques
- `it_can_get_creator_slots_stats()` - Stats complètes
- `it_calculates_utilization_rate()` - Taux d'utilisation
- `it_counts_each_status_correctly()` - Compte par statut
- `it_handles_empty_stats()` - Stats vides (0 slots)

### Tests nettoyage
- `it_can_cleanup_past_slots()` - Marque slots passés
- `it_updates_past_slot_status()` - Status 'past'
- `it_only_cleans_past_slots()` - Laisse futurs intacts

## 🎯 Tests ReservationServiceTest.php

**Fichier :** `tests/Unit/Services/ReservationServiceTest.php`

**Service à tester :** `App\Services\ReservationService`

### Tests création réservation
- `it_can_create_reservation()` - Création basique
- `it_marks_time_slot_as_booked()` - Time slot réservé
- `it_calculates_price_from_event_type()` - Prix événement
- `it_uses_custom_price_if_available()` - Prix custom slot
- `it_sets_correct_timezone()` - Timezone utilisateur
- `it_sends_confirmation_notifications()` - Emails envoyés
- `it_cannot_create_for_unavailable_slot()` - Slot occupé
- `it_cannot_create_for_past_slot()` - Slot passé
- `it_validates_creator_event_type_match()` - EventType du bon créateur

### Tests annulation réservation
- `it_can_cancel_reservation()` - Annulation basique
- `it_releases_time_slot_on_cancel()` - Libère time slot
- `it_sets_cancellation_details()` - cancelled_at, reason
- `it_sends_cancellation_notification()` - Email annulation
- `it_cannot_cancel_completed_reservation()` - Empêche annuler terminée
- `it_respects_cancellation_deadline()` - Délai annulation

### Tests confirmation réservation
- `it_can_confirm_reservation()` - Confirmation créateur
- `it_sets_confirmation_timestamp()` - confirmed_at
- `it_cannot_confirm_non_pending()` - Seulement 'pending'
- `it_only_allows_creator_to_confirm()` - Seulement son créateur

### Tests reprogrammation
- `it_can_reschedule_reservation()` - Changer time slot
- `it_releases_old_time_slot()` - Libère ancien slot
- `it_books_new_time_slot()` - Réserve nouveau slot
- `it_updates_reservation_datetime()` - Met à jour datetime
- `it_validates_new_slot_availability()` - Nouveau slot disponible
- `it_validates_same_creator()` - Même créateur

### Tests statuts spéciaux
- `it_can_mark_as_completed()` - Marquer terminée
- `it_can_mark_as_no_show_customer()` - Client absent
- `it_can_mark_as_no_show_creator()` - Créateur absent
- `it_sets_completion_timestamp()` - completed_at
- `it_sets_no_show_timestamp()` - no_show_at

### Tests récupération données
- `it_can_get_creator_reservations()` - Liste créateur
- `it_can_get_user_reservations()` - Liste utilisateur
- `it_can_filter_by_status()` - Filtrage statut
- `it_can_filter_by_date_range()` - Filtrage dates
- `it_paginates_results()` - Pagination
- `it_includes_relations()` - Relations chargées

### Tests statistiques
- `it_can_get_creator_reservation_stats()` - Stats créateur
- `it_calculates_completion_rate()` - Taux de completion
- `it_calculates_cancellation_rate()` - Taux d'annulation
- `it_calculates_total_revenue()` - Revenus totaux
- `it_handles_empty_stats()` - Stats vides

### Tests validation business
- `it_validates_user_can_cancel()` - Délai annulation
- `it_validates_user_can_reschedule()` - Délai reprogrammation
- `it_prevents_double_booking()` - Empêche double réservation
- `it_handles_concurrent_bookings()` - Réservations simultanées

## 🎯 Tests EmailService et ReminderService (PLUS TARD)

Ces services seront testés dans une prochaine étape.

**Focus maintenant :** AvailabilityService + ReservationService

## 📧 Tests Notifications spécifiques

### Vérifications emails
```php
// Notification envoyée
Notification::assertSentTo($user, NotificationClass::class);

// Contenu notification
Notification::assertSentTo($user, ReservationConfirmation::class, function ($notification) use ($reservation) {
    return $notification->reservation->id === $reservation->id;
});

// Email non envoyé
Notification::assertNotSentTo($user, NotificationClass::class);

// Nombre d'emails
Notification::assertSentTimes(NotificationClass::class, 2);
```

### Tests de contenu email
```php
/** @test */
public function it_includes_correct_data_in_reservation_email()
{
    // Arrange
    $creator = $this->createCreator();
    $customer = $this->createCustomer();
    $reservation = $this->createReservation();
    
    // Act
    $this->emailService->sendReservationConfirmation($customer->user, $reservation);
    
    // Assert
    Notification::assertSentTo($customer->user, ReservationConfirmation::class, function ($notification) use ($reservation) {
        $mail = $notification->toMail($customer->user);
        
        return str_contains($mail->render(), $reservation->eventType->name) &&
               str_contains($mail->render(), $reservation->creator->user->full_name) &&
               str_contains($mail->render(), $reservation->formatted_date_time);
    });
}
```

## 🎮 Données de test gaming

### Réservation gaming complète
```php
protected function createGameReservation()
{
    $creator = $this->createCreator([
        'gaming_pseudo' => 'ProCoach',
        'bio' => 'Coach Valorant expert',
        'timezone' => 'America/Toronto'
    ]);
    
    $customer = $this->createCustomer();
    
    $eventType = $this->createEventType($creator, [
        'name' => 'Coaching Valorant 1v1',
        'default_duration' => 60,
        'default_price' => 50.00,
        'meeting_platform' => 'discord'
    ]);
    
    $timeSlot = $this->createTimeSlot($creator, [
        'start_time' => now()->addDay()->setHour(19),
        'end_time' => now()->addDay()->setHour(20),
    ]);
    
    return Reservation::factory()->create([
        'user_id' => $customer->user_id,
        'creator_id' => $creator->id,
        'event_type_id' => $eventType->id,
        'time_slot_id' => $timeSlot->id,
        'reserved_datetime' => $timeSlot->start_time,
        'timezone' => 'America/Toronto',
        'special_requests' => 'Coaching pour débutant Valorant',
        'price_paid' => 50.00,
        'status' => 'confirmed'
    ]);
}
```

### Données rappel gaming
```php
protected function createReminderScenario()
{
    // Réservation demain
    $tomorrow = now()->addDay()->setHour(19);
    
    $reservation = $this->createGameReservation([
        'reserved_datetime' => $tomorrow,
        'status' => 'confirmed'
    ]);
    
    return $reservation;
}
```

## 🔧 Helpers pour tests Services

### Mock EmailService
```php
protected function mockEmailService()
{
    $mock = \Mockery::mock(EmailService::class);
    $this->app->instance(EmailService::class, $mock);
    return $mock;
}
```

### Assertions custom
```php
protected function assertEmailSentWithData($user, $notificationClass, $expectedData)
{
    Notification::assertSentTo($user, $notificationClass, function ($notification) use ($expectedData) {
        foreach ($expectedData as $key => $value) {
            if (data_get($notification, $key) !== $value) {
                return false;
            }
        }
        return true;
    });
}
```

## 📊 Tests de performance

### Batch reminders
```php
/** @test */
public function it_handles_large_batch_reminders_efficiently()
{
    // Arrange - Créer 100 réservations pour demain
    $reservations = collect(range(1, 100))->map(function () {
        return $this->createReminderScenario();
    });
    
    // Act
    $start = microtime(true);
    $result = $this->reminderService->sendDailyReminders();
    $duration = microtime(true) - $start;
    
    // Assert
    $this->assertEquals(100, $result['sent']);
    $this->assertLessThan(10, $duration); // Moins de 10 secondes
}
```

## 🚀 Commandes à exécuter

```bash
# Créer les 2 tests prioritaires
php artisan make:test Services/AvailabilityServiceTest --unit
php artisan make:test Services/ReservationServiceTest --unit

# Lancer les tests créés
php artisan test tests/Unit/Services/AvailabilityServiceTest
php artisan test tests/Unit/Services/ReservationServiceTest

# Lancer tous les tests Services
php artisan test tests/Unit/Services
```

## 📝 Pattern de test Service

```php
/** @test */
public function it_can_perform_service_action()
{
    // Arrange
    $input = $this->prepareTestData();
    $expectedOutput = $this->defineExpectedResult();
    
    // Act
    $result = $this->service->methodName($input);
    
    // Assert
    $this->assertEquals($expectedOutput, $result);
    $this->assertDatabaseHas('table', $expectedData);
    
    // Assert side effects (emails, notifications)
    Notification::assertSentTo($user, NotificationClass::class);
}
```

## 🎯 Points critiques Services

- **Emails Resend** effectivement envoyés
- **Timezone handling** correct
- **Données gaming** dans les emails (pseudo, game, rank)
- **Gestion d'erreurs** gracieuse
- **Performance** des batch operations
- **Concurrence** (booking simultané)
- **Side effects** (notifications automatiques)
- **Nettoyage** (cleanup past slots)

## 📋 Checklist validation Services

- [ ] EmailService envoie tous les types d'emails
- [ ] ReminderService trouve et envoie les rappels
- [ ] Notifications Resend mockées correctement
- [ ] Données gaming incluses dans emails
- [ ] Gestion timezone dans rappels
- [ ] Performance batch acceptable
- [ ] Erreurs gérées gracieusement
- [ ] Coverage > 85% sur tous les Services
- [ ] Tests passent en isolation et ensemble