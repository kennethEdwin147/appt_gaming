# Instructions Tests HandlesTimezones Trait - Gaming Platform

## 📁 Structure à créer

```
tests/Unit/Traits/
└── HandlesTimezonesTest.php
```

## 🧪 Setup test pour trait

**Fichier :** `tests/Unit/Traits/HandlesTimezonesTest.php`

**Trait à tester :** `App\Traits\HandlesTimezones`

**Setup spécial pour trait :**
```php
<?php

namespace Tests\Unit\Traits;

use Tests\TestCase;
use App\Traits\HandlesTimezones;
use Carbon\Carbon;

class HandlesTimezonesTest extends TestCase
{
    use HandlesTimezones; // Utiliser le trait directement
    
    protected function setUp(): void
    {
        parent::setUp();
        
        // Fixer une date pour tests prévisibles
        Carbon::setTestNow('2025-06-15 12:00:00');
    }
    
    protected function tearDown(): void
    {
        Carbon::setTestNow(); // Reset
        parent::tearDown();
    }
}
```

## 🎯 Tests convertToUTC()

### Tests de base
- `it_can_convert_time_to_utc()` - Conversion basique
- `it_converts_toronto_time_to_utc()` - America/Toronto → UTC
- `it_converts_paris_time_to_utc()` - Europe/Paris → UTC
- `it_converts_tokyo_time_to_utc()` - Asia/Tokyo → UTC
- `it_handles_different_time_formats()` - H:i, H:i:s formats

### Tests avec dates
- `it_converts_with_specific_date()` - Date fournie
- `it_uses_today_when_no_date_provided()` - Date par défaut
- `it_handles_date_boundaries()` - Passage jour suivant

### Tests gaming scenarios
- `it_converts_creator_gaming_hours()` - Horaires gaming (19h-23h)
- `it_handles_late_night_gaming_sessions()` - Sessions nocturnes
- `it_converts_weekend_availability()` - Disponibilités weekend

## 🎯 Tests convertFromUTC()

### Tests de base
- `it_can_convert_from_utc_to_timezone()` - UTC → timezone
- `it_converts_utc_to_toronto()` - UTC → America/Toronto
- `it_converts_utc_to_paris()` - UTC → Europe/Paris
- `it_converts_utc_to_tokyo()` - UTC → Asia/Tokyo

### Tests symétriques
- `it_provides_symmetrical_conversion()` - A→UTC→A = A
- `it_maintains_time_consistency()` - Cohérence aller-retour

### Tests gaming scenarios
- `it_converts_booking_times_to_user_timezone()` - Réservations
- `it_displays_correct_local_time_for_gamers()` - Affichage local

## 🎯 Tests convertDateTime()

### Tests datetime complets
- `it_can_convert_full_datetime()` - DateTime complet
- `it_converts_between_different_timezones()` - Timezones différents
- `it_handles_datetime_with_seconds()` - Avec secondes
- `it_maintains_date_accuracy()` - Précision date

### Tests gaming scheduling
- `it_converts_reservation_datetime()` - DateTime réservation
- `it_handles_cross_date_conversions()` - Changement de date
- `it_converts_session_end_times()` - Fin de session

## 🎯 Tests isValidTime()

### Tests validation de base
- `it_validates_normal_times()` - Heures normales valides
- `it_rejects_invalid_time_formats()` - Formats invalides
- `it_validates_edge_times()` - 00:00, 23:59

### Tests DST (Daylight Saving Time)
- `it_detects_non_existent_times_during_spring_forward()` - Heure inexistante (2h → 3h)
- `it_detects_ambiguous_times_during_fall_back()` - Heure ambiguë (2h → 1h)
- `it_handles_normal_times_during_dst_transitions()` - Heures normales pendant DST
- `it_provides_detailed_error_messages()` - Messages d'erreur détaillés

### Tests timezones multiples
- `it_validates_times_in_toronto_timezone()` - America/Toronto
- `it_validates_times_in_paris_timezone()` - Europe/Paris
- `it_validates_times_in_no_dst_timezone()` - Pas de DST (UTC)

### Tests gaming edge cases
- `it_validates_late_night_gaming_hours()` - 23h-2h
- `it_handles_availability_across_dst_changes()` - Availabilities + DST
- `it_validates_booking_times_near_dst()` - Réservations près DST

## 🎯 Tests getTimezoneOffset()

### Tests calcul offset
- `it_calculates_timezone_offset()` - Offset entre timezones
- `it_handles_positive_offsets()` - Offset positif
- `it_handles_negative_offsets()` - Offset négatif
- `it_formats_offset_correctly()` - Format +X:00

### Tests gaming scenarios
- `it_calculates_creator_to_user_offset()` - Créateur → User
- `it_shows_time_difference_for_booking()` - Différence pour booking
- `it_handles_same_timezone_offset()` - Même timezone (offset 0)

## 🎯 Tests formatTimeWithZone()

### Tests formatage
- `it_formats_time_with_timezone_abbreviation()` - Avec abréviation
- `it_shows_correct_timezone_names()` - EST, PST, CET, etc.
- `it_handles_dst_abbreviation_changes()` - EST/EDT, CET/CEST
- `it_formats_with_specific_date()` - Date spécifique

### Tests gaming display
- `it_formats_gaming_session_times()` - Affichage sessions
- `it_shows_creator_local_time()` - Heure locale créateur
- `it_formats_booking_confirmation_times()` - Confirmation réservation

## 🎯 Tests getDSTTransitionForDate()

### Tests détection DST
- `it_detects_spring_forward_transition()` - Passage heure d'été
- `it_detects_fall_back_transition()` - Passage heure d'hiver
- `it_returns_false_for_no_transition()` - Pas de changement
- `it_provides_transition_details()` - Détails complets

### Tests gaming impact
- `it_warns_about_dst_affecting_bookings()` - Impact réservations
- `it_handles_availability_during_dst()` - Disponibilités pendant DST
- `it_detects_problematic_gaming_dates()` - Dates problématiques

## 🎮 Données de test gaming spécifiques

### Timezones gaming populaires
```php
protected function getGamingTimezones(): array
{
    return [
        'America/Toronto' => 'Canada/US East Coast gamers',
        'America/Los_Angeles' => 'US West Coast gamers', 
        'Europe/Paris' => 'European gamers',
        'Europe/London' => 'UK gamers',
        'Asia/Tokyo' => 'Japanese gamers',
        'Australia/Sydney' => 'Australian gamers',
    ];
}
```

### Sessions gaming typiques
```php
protected function getGamingSchedules(): array
{
    return [
        'weeknight_na' => ['19:00', '23:00'], // NA evening gaming
        'weekend_eu' => ['14:00', '18:00'],   // EU afternoon
        'late_night_asia' => ['22:00', '02:00'], // Asia late night
        'morning_coaching' => ['09:00', '12:00'], // Morning coaching
    ];
}
```

### Dates DST critiques 2025
```php
protected function getDSTTestDates(): array
{
    return [
        'spring_forward_us' => '2025-03-09', // US Spring forward
        'fall_back_us' => '2025-11-02',      // US Fall back
        'spring_forward_eu' => '2025-03-30', // EU Spring forward
        'fall_back_eu' => '2025-10-26',      // EU Fall back
    ];
}
```

## 🧪 Tests patterns spécifiques

### Test conversion symétrique
```php
/** @test */
public function it_provides_symmetrical_timezone_conversion()
{
    // Arrange
    $originalTime = '19:30';
    $creatorTimezone = 'America/Toronto';
    $testDate = '2025-06-15';
    
    // Act
    $utcTime = $this->convertToUTC($originalTime, $creatorTimezone, $testDate);
    $backToOriginal = $this->convertFromUTC($utcTime, $creatorTimezone, $testDate);
    
    // Assert
    $this->assertEquals($originalTime, $backToOriginal);
}
```

### Test DST problématique
```php
/** @test */
public function it_detects_non_existent_time_during_spring_forward()
{
    // Arrange - 2h30 n'existe pas le jour de passage à l'heure d'été
    $nonExistentTime = '02:30';
    $timezone = 'America/Toronto';
    $springForwardDate = '2025-03-09';
    
    // Act
    $isValid = $this->isValidTime($nonExistentTime, $timezone, $springForwardDate);
    $reason = $this->isValidTime($nonExistentTime, $timezone, $springForwardDate, true);
    
    // Assert
    $this->assertFalse($isValid);
    $this->assertStringContains('n\'existe pas', $reason);
    $this->assertStringContains('passage à l\'heure d\'été', $reason);
}
```

### Test gaming cross-timezone
```php
/** @test */
public function it_handles_gaming_session_across_timezones()
{
    // Arrange - Créateur Toronto, User Paris
    $creatorTimezone = 'America/Toronto';
    $userTimezone = 'Europe/Paris';
    $sessionTime = '20:00'; // 8PM Toronto
    $date = '2025-06-15';
    
    // Act
    $utcTime = $this->convertToUTC($sessionTime, $creatorTimezone, $date);
    $userLocalTime = $this->convertFromUTC($utcTime, $userTimezone, $date);
    $formattedTime = $this->formatTimeWithZone($userLocalTime, $userTimezone, $date);
    
    // Assert
    $this->assertEquals('02:00', $userLocalTime); // 2AM Paris next day
    $this->assertStringContains('02:00', $formattedTime);
    $this->assertStringContains('CEST', $formattedTime); // Summer time
}
```

## 📊 Tests edge cases critiques

### Tests limites de dates
- `it_handles_year_boundary_conversions()` - Passage année
- `it_handles_month_boundary_conversions()` - Passage mois
- `it_handles_leap_year_dates()` - Années bissextiles

### Tests performances
- `it_performs_conversions_efficiently()` - Performance batch
- `it_handles_multiple_timezone_calculations()` - Calculs multiples

### Tests erreurs
- `it_handles_invalid_timezone_names()` - Timezone invalide
- `it_handles_malformed_time_strings()` - Formats temps invalides
- `it_gracefully_handles_edge_case_dates()` - Dates limites

## 🚀 Commandes à exécuter

```bash
# Créer le dossier
mkdir -p tests/Unit/Traits

# Créer le test
php artisan make:test Traits/HandlesTimezonesTest --unit

# Lancer le test
php artisan test tests/Unit/Traits/HandlesTimezonesTest

# Avec verbose pour voir détails
php artisan test tests/Unit/Traits/HandlesTimezonesTest --verbose

# Coverage du trait
php artisan test tests/Unit/Traits --coverage
```

## 🎯 Points critiques gaming

### Must-test scenarios
- **Creator Toronto, User Paris** - Gaming cross-Atlantic
- **Late night gaming** (22h-2h) - Change de jour
- **DST transitions** - Réservations problématiques  
- **Weekend availability** - Créneaux weekend
- **Coaching sessions** - Horaires coaching (9h-17h)

### Performance requirements
- **< 1ms per conversion** - Conversions rapides
- **Batch processing** - 1000+ conversions en < 100ms
- **Memory efficient** - Pas de leaks sur gros volumes

## 📋 Checklist validation

- [ ] Toutes les méthodes du trait testées
- [ ] Conversions symétriques fonctionnent
- [ ] DST détecté et géré correctement
- [ ] Gaming timezones supportés (NA, EU, ASIA)
- [ ] Cross-timezone gaming sessions OK
- [ ] Performance acceptable pour batch
- [ ] Gestion erreurs gracieuse
- [ ] Messages d'erreur informatifs
- [ ] Coverage > 90% sur le trait
- [ ] Edge cases DST couverts

## 💡 Notes importantes

- **Carbon::setTestNow()** pour tests prévisibles
- **DST dates réelles 2025** dans les tests
- **Gaming scenarios** prioritaires
- **Performance critique** pour app temps réel
- **Error messages** en français
- **Cross-timezone** gaming sessions essentielles