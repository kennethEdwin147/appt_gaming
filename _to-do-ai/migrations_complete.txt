MIGRATIONS COMPLÈTES - PLATEFORME GAMING/CRÉATEURS
================================================================

1. MIGRATION: 0001_01_01_000000_create_users_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('first_name'); // Ajout du prénom
            $table->string('last_name');  
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password')->nullable();
            $table->enum('role', ['user', 'creator', 'customer', 'admin', 'guest'])->default('user');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};

2. MIGRATION: 0001_01_01_000001_create_cache_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};

3. MIGRATION: 0001_01_01_000002_create_jobs_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};

4. MIGRATION: 2024_06_02_200000_create_customers_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('customers', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            
            // Contact
            $table->string('phone', 20)->nullable();
            $table->timestamp('phone_verified_at')->nullable();
            
            // Personnel
            $table->date('date_of_birth')->nullable();
            
            // Système (notifications TOUJOURS actives)
            $table->string('timezone', 50)->default('Europe/Paris');
            $table->string('language', 5)->default('fr');
            $table->enum('status', ['active', 'inactive', 'suspended'])->default('active');
            $table->timestamp('last_activity_at')->nullable();
            
            $table->timestamps();
            
            // Index
            $table->unique('user_id');
            $table->index(['status', 'created_at']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('customers');
    }
};

5. MIGRATION: 2025_05_09_042740_create_schedules_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * Cette migration crée la table 'schedules' (horaires) qui appartient à un créateur
     */
    public function up(): void
    {
        // Création de la table des horaires (schedules)
        Schema::create('schedules', function (Blueprint $table) {
            $table->id();
            // Un horaire appartient à un créateur
            $table->foreignId('creator_id')->constrained('users')->onDelete('cascade');
            $table->string('name')->comment('Nom de l\'horaire (ex: "Horaires de travail", "Horaires de consultation")');
            $table->date('effective_from')->nullable()->comment('Date de début de validité de l\'horaire');
            $table->date('effective_until')->nullable()->comment('Date de fin de validité de l\'horaire');
            $table->timestamps();

            // Un créateur ne peut pas avoir deux horaires avec le même nom
            $table->unique(['creator_id', 'name']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        // Suppression de la table des horaires
        Schema::dropIfExists('schedules');
    }
};

6. MIGRATION: 2025_05_09_042741_create_creators_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
          Schema::create('creators', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->unique()->constrained()->onDelete('cascade');
            $table->text('bio')->nullable();
            $table->string('platform_name')->nullable();
            $table->string('platform_url')->nullable();
            $table->string('type')->nullable();
            $table->string('timezone')->nullable();  // Fuseau horaire du créateur
            $table->text('confirmation_token')->nullable();  // Token de confirmation pour l'inscription
            $table->timestamp('confirmed_at')->nullable();  // Date de confirmation du compte
            $table->decimal('platform_commission_rate', 5, 2)->default(0.05)->comment('Taux de commission de la plateforme pour ce créateur (par défaut 5%)');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('creators');
    }
};

7. MIGRATION: 2025_05_09_042743_create_event_types_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('event_types', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->text('description')->nullable();
            $table->integer('default_duration')->default(60)->comment('Duration in minutes');
            $table->decimal('default_price', 10, 2)->nullable();
            $table->integer('default_max_participants')->nullable();
            $table->string('meeting_platform')->default('zoom')->comment('Plateforme de réunion (zoom, teams, google_meet, etc.)');
            $table->string('meeting_link')->comment('Lien de réunion personnalisé');
            $table->foreignId('creator_id')->constrained('creators')->onDelete('cascade');
            $table->foreignId('schedule_id')->constrained()->onDelete('cascade')->comment('Horaire associé à ce type d\'événement');
            $table->timestamps();
            $table->unique(['name', 'creator_id']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('event_types');
    }
};

8. MIGRATION: 2025_05_09_042749_create_creator_profiles_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('creator_profiles', function (Blueprint $table) {
            $table->id();
            $table->foreignId('creator_id')->unique()->constrained()->onDelete('cascade');
            $table->string('slug')->unique()->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('creator_profiles');
    }
};

9. MIGRATION: 2025_05_09_042751_create_availabilities_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('availabilities', function (Blueprint $table) {
            $table->id();
            $table->foreignId('schedule_id')->constrained()->onDelete('cascade')->comment('Horaire auquel appartient cette disponibilité');
            $table->enum('day_of_week', ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']);
            $table->time('start_time');
            $table->time('end_time');
            $table->date('effective_from')->nullable();
            $table->date('effective_until')->nullable();
            $table->boolean('is_active')->default(true);
            $table->timestamps();

            // Un horaire ne peut pas avoir le même créneau horaire
            $table->unique(
                ['schedule_id', 'day_of_week', 'start_time', 'effective_from', 'effective_until'],
                'unique_availability_slot_schedule'
            );
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('availabilities');
    }
};

10. MIGRATION: 2025_05_09_042752_create_notifications_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('notifications', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->nullable()->constrained()->onDelete('cascade');
            $table->string('type');
            $table->string('subject');
            $table->text('message');
            $table->timestamp('read_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('notifications');
    }
};

11. MIGRATION: 2025_05_09_042753_create_reservations_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('reservations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('creator_id')->constrained()->onDelete('cascade');
            $table->foreignId('event_type_id')->constrained()->onDelete('cascade');
            $table->foreignId('availability_id')->nullable()->constrained()->onDelete('set null')->comment('Référence à la disponibilité utilisée pour cette réservation');
            $table->string('guest_first_name')->nullable();
            $table->string('guest_last_name')->nullable();
            $table->dateTime('reserved_datetime');
            $table->string('timezone')->nullable()->comment('Fuseau horaire de l\'utilisateur qui a fait la réservation');
            $table->string('meeting_link')->nullable()->comment('Lien de réunion spécifique à cette réservation');
            $table->timestamp('reservation_time')->useCurrent();
            $table->enum('status', ['pending', 'confirmed', 'cancelled', 'rescheduled', 'completed'])->default('pending')->comment('Statut de la réservation indépendamment du paiement');
            $table->string('payment_status')->default('pending');
            $table->string('payment_id')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('reservations');
    }
};

12. MIGRATION: 2025_05_09_042754_create_transactions_table.php
================================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('transactions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('reservation_id')->unique()->constrained()->onDelete('cascade');
            $table->string('payment_provider')->nullable()->comment('Fournisseur de paiement (stripe, paypal, manual)');
            $table->string('payment_id')->nullable()->comment('ID de transaction du fournisseur');
            $table->decimal('amount', 8, 2);
            $table->string('currency', 10)->default('CAD');
            $table->string('status', 50);
            $table->json('payment_details')->nullable()->comment('Détails supplémentaires du paiement');
            $table->decimal('platform_commission_rate', 5, 2)->nullable()->comment('Taux de commission de la plateforme appliqué à cette transaction');
            $table->decimal('platform_commission_amount', 8, 2)->nullable()->comment('Montant de la commission de la plateforme sur cette transaction');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('transactions');
    }
};

================================================================
RÉSUMÉ DE L'ARCHITECTURE DE BASE DE DONNÉES
================================================================

TABLES PRINCIPALES:
1. users - Utilisateurs de base avec rôles (user, creator, customer, admin, guest)
2. customers - Profils clients avec timezone et préférences
3. creators - Profils créateurs avec bio, plateforme, commission
4. creator_profiles - Profils publics des créateurs avec slug
5. schedules - Horaires de travail des créateurs
6. availabilities - Créneaux disponibles par horaire
7. event_types - Types d'événements proposés par les créateurs
8. reservations - Réservations d'événements
9. transactions - Transactions financières
10. notifications - Système de notifications
11. cache/cache_locks - Système de cache Laravel
12. jobs/job_batches/failed_jobs - Système de queues Laravel
13. password_reset_tokens - Tokens de réinitialisation
14. sessions - Sessions utilisateurs

RELATIONS CLÉS:
- User -> Creator (1:1)
- User -> Customer (1:1)
- Creator -> CreatorProfile (1:1)
- Creator -> Schedule (1:N)
- Schedule -> Availability (1:N)
- Creator -> EventType (1:N)
- EventType -> Reservation (1:N)
- Reservation -> Transaction (1:1)
- User -> Notification (1:N)

FONCTIONNALITÉS:
- Système multi-timezone
- Gestion des commissions de plateforme
- Intégration avec Zoom/Teams/Google Meet
- Système de paiement avec Stripe/PayPal
- Notifications en temps réel
- Système de réservation avec statuts multiples