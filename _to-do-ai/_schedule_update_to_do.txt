# Instructions Simplification Base de Données - Suppression Schedules

## PROBLÈME IDENTIFIÉ

La table `schedules` est obsolète. Les horaires doivent être récurrents automatiquement sans dates de début/fin. Structure actuelle trop complexe : `creators → schedules → availabilities → time_slots`

## OBJECTIF

Simplifier vers : `creators → availabilities → time_slots`

## ACTIONS À EFFECTUER

### 1. SUPPRIMER/MODIFIER LES MIGRATIONS

#### Supprimer la migration schedules
```bash
# Supprimer le fichier de migration
rm database/migrations/*_create_schedules_table.php
```

#### Modifier la migration availabilities
```php
// Dans create_availabilities_table.php
// AVANT :
$table->foreignId('schedule_id')->constrained()->onDelete('cascade');

// APRÈS :
$table->foreignId('creator_id')->constrained()->onDelete('cascade');

// SUPPRIMER ces colonnes inutiles :
// $table->date('effective_from')->nullable();
// $table->date('effective_until')->nullable();

// GARDER seulement :
$table->id();
$table->foreignId('creator_id')->constrained()->onDelete('cascade');
$table->enum('day_of_week', ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']);
$table->time('start_time');
$table->time('end_time');
$table->boolean('is_active')->default(true);
$table->timestamps();

// Index
$table->index(['creator_id', 'day_of_week', 'is_active']);
```

#### Modifier la migration event_types
```php
// Dans create_event_types_table.php
// SUPPRIMER cette ligne :
// $table->foreignId('schedule_id')->constrained()->onDelete('cascade');

// Event types sont liés directement aux créateurs, pas aux schedules
```

### 2. METTRE À JOUR LES MODELS

#### Supprimer le model Schedule
```bash
rm app/Models/Schedule.php
```

#### Modifier le model Creator
```php
// SUPPRIMER cette relation :
// public function schedules() { return $this->hasMany(Schedule::class); }

// AJOUTER cette relation directe :
public function availabilities()
{
    return $this->hasMany(Availability::class);
}
```

#### Modifier le model Availability
```php
// SUPPRIMER cette relation :
// public function schedule() { return $this->belongsTo(Schedule::class); }

// MODIFIER vers :
public function creator()
{
    return $this->belongsTo(Creator::class);
}

// SUPPRIMER du fillable :
// 'schedule_id', 'effective_from', 'effective_until'

// GARDER dans fillable :
protected $fillable = [
    'creator_id',
    'day_of_week', 
    'start_time', 
    'end_time', 
    'is_active'
];
```

#### Modifier le model EventType
```php
// SUPPRIMER cette relation :
// public function schedule() { return $this->belongsTo(Schedule::class); }

// SUPPRIMER du fillable :
// 'schedule_id'
```

### 3. METTRE À JOUR LES SERVICES

#### AvailabilityService - Simplifier les queries
```php
// AVANT (avec schedules) :
$availabilities = Availability::whereHas('schedule', function ($query) use ($creator) {
    $query->where('creator_id', $creator->id);
})

// APRÈS (direct) :
$availabilities = Availability::where('creator_id', $creatorId)
    ->where('day_of_week', $dayOfWeek)
    ->where('is_active', true)
    ->get();

// SUPPRIMER toutes les vérifications effective_from/effective_until
// Les horaires sont maintenant toujours actifs et récurrents
```

### 4. METTRE À JOUR LES FACTORIES

#### Supprimer ScheduleFactory
```bash
rm database/factories/ScheduleFactory.php
```

#### Modifier AvailabilityFactory
```php
// CHANGER :
'schedule_id' => Schedule::factory(),

// VERS :
'creator_id' => Creator::factory(),

// SUPPRIMER :
// 'effective_from' => $this->faker->optional()->date(),
// 'effective_until' => $this->faker->optional()->date(),
```

### 5. METTRE À JOUR LES CONTROLLERS

#### Supprimer les références schedules
```php
// Dans AvailabilityController et autres
// SUPPRIMER toute logique liée aux schedules

// SIMPLIFIER vers des queries directes :
$availabilities = Availability::where('creator_id', $creatorId)->get();
```

### 6. METTRE À JOUR LES SEEDERS

#### Modifier DatabaseSeeder
```php
// SUPPRIMER toute création de schedules

// CRÉER directement des availabilities pour les créateurs :
$creator = Creator::first();
Availability::create([
    'creator_id' => $creator->id,
    'day_of_week' => 'monday',
    'start_time' => '09:00',
    'end_time' => '17:00',
    'is_active' => true,
]);
```

## STRUCTURE FINALE SIMPLIFIÉE

```
TABLES :
- creators (inchangé)
- availabilities (simplifié - lié direct aux créateurs)
- time_slots (inchangé)
- event_types (plus de schedule_id)
- reservations (inchangé)

RELATIONS :
Creator → hasMany(Availability)
Creator → hasMany(TimeSlot) 
Creator → hasMany(EventType)
Availability → belongsTo(Creator)
TimeSlot → belongsTo(Creator)
EventType → belongsTo(Creator)
```

## AVANTAGES DE CETTE SIMPLIFICATION

✅ **Moins de tables** - Structure plus simple  
✅ **Moins de foreign keys** - Moins de jointures  
✅ **Logique plus claire** - Direct créateur → horaires  
✅ **Horaires toujours récurrents** - Pas de gestion dates début/fin  
✅ **Performance améliorée** - Moins de jointures  
✅ **Maintenance plus facile** - Moins de complexité  

## COMMANDES À EXÉCUTER APRÈS MODIFICATIONS

```bash
# Supprimer la base et recréer
php artisan migrate:fresh

# Ou créer une nouvelle migration pour supprimer schedules
php artisan make:migration remove_schedules_table
```

## VALIDATION

Après modifications, vérifier que :
- [ ] Plus de références à Schedule dans le code
- [ ] Availabilities liées directement aux créateurs
- [ ] Time slots se génèrent correctement
- [ ] Event types fonctionnent sans schedule_id
- [ ] Pas d'erreurs de foreign key

## TESTS À EFFECTUER

1. Créer un créateur
2. Ajouter des availabilities (lundi 9h-17h, etc.)
3. Générer des time_slots 
4. Créer une réservation
5. Vérifier que tout fonctionne sans schedules